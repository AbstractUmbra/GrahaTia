[project]
name = "Graha-Tia"
version = "0.0.1"
description = "A helper bot for organizing your FFXIV needs."
authors = [{ name = "Alex NÃ¸rgaard", email = "umbra@abstractumbra.dev" }]
dependencies = [
    "asyncpg",
    "beautifulsoup4",
    "discord-ext-menus @ git+https://github.com/Rapptz/discord-ext-menus@master",
    "discord-py[speed] @ git+https://github.com/Rapptz/discord.py.git@master",
    "jishaku",
    "lru-dict",
    "lxml",
    "mystbin-py",
    "parsedatetime",
    "psutil",
    "pygit2",
    "python-dateutil",
    "sentry-sdk[aiohttp,asyncpg]",
    "uvloop>=0.21.0",
]
requires-python = "<4.0,>=3.13"
readme = "README.md"
license = { text = "MPL2.0" }

[dependency-groups]
dev = ["ruff", "typing-extensions", "asyncpg-stubs"]
super-dev = ["ipython", "ipykernel"]
speed = ["orjson", "uvloop"]

[tool.ruff]
line-length = 125
target-version = "py313"

[tool.ruff.format]
line-ending = "lf"

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
    "ANN401",
    "ASYNC109", # dpy commonly uses this parameter
    "COM812",   # unnecessary since we use the formatter
    "EM101",    # in this case this is okay
    "F401",
    "F402",
    "F403",
    "F405",
    "PD011",    # this is not a numpy codebase
    "PERF203",
    "PLC0414",  # pyright ruling for `as` imports needed
    "Q000",
    "RUF001",
    "RUF009",
    "S101",     # assert is used for type checking in this codebase
    "SIM105",
    "TRY003",   # over-eager rule
    "TRY301",   # unrealistic rule
    "UP034",
    "UP038",
]
unfixable = [
    "E501", # line length handled in other ways by ruff format
    "ERA",  # Don't delete commented out code
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-import-conventions.aliases]
"concurrent.futures" = "cf"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# https://discuss.python.org/t/problems-with-typeis/55410/46
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.

"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing.runtime_checkable".msg = "Runtime checkable is fundamentally unsafe."
"typing_extensions.runtime_checkable".msg = "Runtime checkable is fundamentally unsafe."

# these don't work as deferred imports, intentionally, because type checkers are dumb
# and require they be imported directly from typing to work, this breaks the deferred re-export.
"typing.Final".msg = "see https://github.com/microsoft/pyright/issues/9664#issuecomment-2574042580"
"typing_extensions.Final".msg = "see https://github.com/microsoft/pyright/issues/9664#issuecomment-2574042580"
"typing.final".msg = "see https://github.com/microsoft/pyright/issues/9664#issuecomment-2574042580"
"typing_extensions.final".msg = "see https://github.com/microsoft/pyright/issues/9664#issuecomment-2574042580"

[tool.pyright]
include = ["bot.py", "utilities/**/*.py", "extensions/**/*.py"]
useLibraryCodeForTypes = true
typeCheckingMode = "basic"
pythonVersion = "3.13"
pythonPlatform = "All"
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
strictParameterNoneValue = true
reportMissingImports = "error"
reportUnusedImport = "error"
reportUnusedClass = "error"
reportUnusedFunction = "error"
reportUnusedVariable = "error"
reportGeneralTypeIssues = "error"
reportDuplicateImport = "error"
reportUntypedFunctionDecorator = "error"
reportUnnecessaryTypeIgnoreComment = "warning"
