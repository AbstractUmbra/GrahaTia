[project]
name = "Graha-Tia"
version = "0.0.1"
description = "A helper bot for organizing your FFXIV needs."
authors = [{ name = "Alex NÃ¸rgaard", email = "umbra@abstractumbra.dev" }]
dependencies = [
    "asyncpg",
    "beautifulsoup4",
    "discord-ext-menus @ git+https://github.com/Rapptz/discord-ext-menus@master",
    "discord-py[speed] @ git+https://github.com/Rapptz/discord.py.git@master",
    "jishaku",
    "lru-dict",
    "lxml",
    "mystbin-py",
    "parsedatetime",
    "psutil",
    "pygit2",
    "python-dateutil",
    "sentry-sdk[aiohttp,asyncpg]",
    "uvloop>=0.21.0",
    "webserver",
]
requires-python = "<4.0,>=3.13"
readme = "README.md"
license = { text = "MPL2.0" }

[dependency-groups]
dev = ["ruff", "typing-extensions", "asyncpg-stubs"]
super-dev = ["ipython", "ipykernel"]
speed = ["orjson", "uvloop"]

[tool.uv.workspace]
members = ["webserver"]
[tool.uv.sources]
webserver = { workspace = true }

[tool.ruff]
line-length = 125
target-version = "py313"

[tool.ruff.lint]
preview = true
select = [
    "A",
    "ANN",
    "ASYNC",
    "B",
    "BLE",
    "C4",
    "COM",
    "DTZ",
    "E",
    "EM",
    "ERA",
    "F",
    "FA",
    "FBT",
    "FURB",
    "G",
    "I",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PERF",
    "PGH",
    "PIE",
    "PLC",
    "PLE",
    "PLW",
    "PTH",
    "PYI",
    "Q",
    "Q003",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "SLOT",
    "T20",
    "TC",
    "TID",
    "TRY",
    "UP",
    "YTT",
    # "DOC", # not in a bot, please
]
ignore = [
    "ANN401",
    "ASYNC109", # dpy commonly uses this parameter
    "COM812",   # unnecessary since we use the formatter
    "EM101",    # in this case this is okay
    "F401",
    "F402",
    "F403",
    "F405",
    "PD011",    # this is not a numpy codebase
    "PERF203",
    "PLC0414",  # pyright ruling for `as` imports needed
    "Q000",
    "RUF001",
    "RUF009",
    "S101",     # assert is used for type checking in this codebase
    "SIM105",
    "TRY003",   # over-eager rule
    "TRY301",   # unrealistic rule
    "UP034",
    "UP038",
]
unfixable = [
    "E501", # line length handled in other ways by ruff format
    "ERA",  # Don't delete commented out code
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
split-on-trailing-comma = true
combine-as-imports = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "csv"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# https://discuss.python.org/t/problems-with-typeis/55410/46
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.
"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"

[tool.pyright]
include = ["bot.py", "utilities/**/*.py", "extensions/**/*.py"]
useLibraryCodeForTypes = true
typeCheckingMode = "standard"
pythonVersion = "3.13"
pythonPlatform = "All"

# type issues
disableBytesTypePromotions = true
strictParameterNoneValue = true
reportMissingTypeStubs = "error"
reportMissingModuleSource = "warning"
reportInvalidTypeForm = "error"
reportMissingImports = "error"
reportUndefinedVariable = "error"
reportInvalidTypeVarUse = "error"
reportSelfClsParameterName = "error"

reportAbstractUsage = "error"
reportArgumentType = "error"
reportAssertTypeFailure = "error"
reportAssignmentType = "error"
reportAttributeAccessIssue = "error"
reportCallIssue = "error"
reportGeneralTypeIssues = "error"
reportInconsistentOverload = "error"
reportIndexIssue = "error"
reportInvalidTypeArguments = "error"
reportNoOverloadImplementation = "error"
reportOperatorIssue = "error"
reportOptionalSubscript = "error"
reportOptionalMemberAccess = "error"
reportOptionalCall = "error"
reportOptionalIterable = "error"
reportOptionalContextManager = "error"
reportOptionalOperand = "error"
reportReturnType = "error"
reportTypedDictNotRequiredAccess = "error"
reportUnhashable = "error"
reportUnusedExcept = "error"
reportFunctionMemberAccess = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportOverlappingOverload = "error"
reportPossiblyUnboundVariable = "error"
reportConstantRedefinition = "error"
reportDeprecated = "warning"

reportIncompleteStub = "error"
reportInconsistentConstructor = "error"
reportInvalidStubStatement = "error"
reportMatchNotExhaustive = "error"
reportMissingParameterType = "error"

reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportUnknownMemberType = "error"
reportUnknownParameterType = "error"
reportUnknownVariableType = "error"
reportUnnecessaryCast = "warning"

reportCallInDefaultInitializer = "warning"
reportMissingSuperCall = "none"
reportPropertyTypeMismatch = "error"

# other type-issues

reportUntypedBaseClass = "warning"         # spec says treat this as Any
reportUntypedClassDecorator = "warning"    # spec says (Any) -> Any
reportUntypedFunctionDecorator = "warning" # spec says (Any) -> Any
reportUntypedNamedTuple = "none"           # Just no.

# not type issues, even if pyright and mypy offer checks as if they were
# by calling them "Strict mode checks"
# these are "opinionated errors with well-defined type interpretation"

reportImplicitOverride = "none"
reportMissingTypeArgument = "none"
deprecateTypingAliases = false
reportUnnecessaryComparison = "none"
reportUnnecessaryContains = "none"
reportUnnecessaryIsInstance = "none"
reportAssertAlwaysTrue = "none"
reportTypeCommentUsage = "none"

# reasonably preventing accidents

reportUnnecessaryTypeIgnoreComment = "warning"

reportUnsupportedDunderAll = "error"
reportWildcardImportFromLibrary = "error"
reportShadowedImports = "warning"

reportUninitializedInstanceVariable = "warning"
reportUnusedCoroutine = "warning"
reportUnusedExpression = "warning"

reportPrivateUsage = "warning"
reportPrivateImportUsage = "warning"

reportInvalidStringEscapeSequence = "error"
reportRedeclaration = "error"
reportUnboundVariable = "error"

reportUnusedClass = "warning"
reportUnusedImport = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"

# analysis behavior
enableTypeIgnoreComments = true
enableReachabilityAnalysis = true
analyzeUnannotatedFunctions = true
reportImportCycles = "error"
enableExperimentalFeatures = false

# inference settings
strictListInference = true
strictDictionaryInference = true
strictSetInference = true

# overly-worriesome linter-esque options
reportImplicitStringConcatenation = "none"
reportUnusedCallResult = "none"
reportDuplicateImport = "none"             # handled by ruff
